Harrison Zafrin
Final Project Implementation

2. Updated Design
	
	TITLE : 
		VinylVisualizer
	AUTHORS : 
		Harrison Zafrin
	ABSTRACT : 
		My project is an interactive Visualizer with realtime audio effects featuring
		"variable speed replay” and 2-Pole Lowpass and Highpass IIR Filters.

	WHAT : 
		VinylVisualizer runs straight from the command line.  It provides an interactive
		Visualization of the streaming audio file in the shape of a Vinyl Disc.  The shape
		of the visualization is a play on one of the visualizers audio effects called Vari-Speed.
		Variable Speed Playback allows the audio file to speed up and slow down speed while
		simultaneously changing pitch, a feature possible in the analog world by modulating
		the speed of a Vinyl Player.  The visualizer also features Lowpass and Highpass IIR
		filters which effect the visualization.

	IMPLEMENTATION : 
	The program uses Libsndfile to read an audio track chunk by chunk into an input buffer 
	inside of Port Audios callback function. Once inside the callback function, the filled input 
	buffer is passed serially to a chain of audio effects. The first effect in the chain is a Sample Rate Converter 
	handled by Libsamplerates src_process function. Because Port Audios output sampling rate is static, 
	the interpolation and decimation that is computed by src_process causes a variable speed playback 
	effect akin to a Vinyl Player.

	/* This if Statement Ensures Smooth VariSpeed Output */
    	if (fmod((double)framesPerBuffer, data->src_data.src_ratio) == 0)
    	{
    		numInFrames = framesPerBuffer;
    	}
    	else
    	numInFrames = (framesPerBuffer/data->src_data.src_ratio) + 2;

	/* Read FramesPerBuffer Amount of Data from inFile into buffer[] */
	numberOfFrames = sf_readf_float(data->inFile, data->src_inBuffer, numInFrames);

	For example in the code above, if our framesPerBuffer is 1024, our src_ratio is 2 and our output_frames 
	to be generated is 1024, we pass 512 frames into src_process to interpolate 512 more frames, ensuring a 
	slowdown variable speed playback effect.

	Post src_process, the effected audio is then passed to Lowpass and Highpass functions with variable 
	frequency and resonance. The audio is then passed one more time to an anti-clipping function to prevent 
	distortion from high resonance values generated by the filters.

	For the visuals, the effected audio is passed to a visual buffer to dynamically change the visualization. 
	Right now, color values, scaling, and modulation on the z-axis are all effected by the incoming audio samples 
	amplitude values. The goal once again was to create a visualizaton of a "disc", however more than one person 
	has told me it looks like a donut.
